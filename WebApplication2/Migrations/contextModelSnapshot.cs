// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication2.Models;

#nullable disable

namespace WebApplication2.Migrations
{
    [DbContext(typeof(context))]
    partial class contextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("WebApplication2.ChatModels.Dialog", b =>
                {
                    b.Property<int>("idDialog")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idDialog"), 1L, 1);

                    b.Property<int>("idOrganization")
                        .HasColumnType("int");

                    b.Property<int>("idParent")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idDialog");

                    b.HasIndex("idOrganization");

                    b.HasIndex("idParent");

                    b.ToTable("Dialogs");
                });

            modelBuilder.Entity("WebApplication2.ChatModels.Message", b =>
                {
                    b.Property<int>("idMessage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idMessage"), 1L, 1);

                    b.Property<int>("idDialog")
                        .HasColumnType("int");

                    b.Property<int?>("idOrganization")
                        .HasColumnType("int");

                    b.Property<int?>("idParent")
                        .HasColumnType("int");

                    b.Property<DateTime>("messageTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("textMessage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idMessage");

                    b.HasIndex("idDialog");

                    b.HasIndex("idOrganization");

                    b.HasIndex("idParent");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("WebApplication2.Models.Admin", b =>
                {
                    b.Property<int>("idAdmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idAdmin"), 1L, 1);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idAdmin");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("WebApplication2.Models.Camp", b =>
                {
                    b.Property<int>("idCamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idCamp"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdOrganization")
                        .HasColumnType("int");

                    b.Property<int?>("OrganizationIdOrganization")
                        .HasColumnType("int");

                    b.Property<string>("TermsAndPayment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeCamp")
                        .HasColumnType("int");

                    b.Property<string>("WorkingMode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("campName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("foodInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("haveSportObjects")
                        .HasColumnType("bit");

                    b.Property<int>("housingCount")
                        .HasColumnType("int");

                    b.Property<string>("supportTelephone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("territoryArea")
                        .HasColumnType("float");

                    b.HasKey("idCamp");

                    b.HasIndex("OrganizationIdOrganization");

                    b.ToTable("Camps");
                });

            modelBuilder.Entity("WebApplication2.Models.CampPhoto", b =>
                {
                    b.Property<int>("idCampPhoto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idCampPhoto"), 1L, 1);

                    b.Property<int>("idCamp")
                        .HasColumnType("int");

                    b.Property<string>("url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idCampPhoto");

                    b.HasIndex("idCamp");

                    b.ToTable("CampPhotos");
                });

            modelBuilder.Entity("WebApplication2.Models.Certificate", b =>
                {
                    b.Property<int>("idCertificate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idCertificate"), 1L, 1);

                    b.Property<int>("idCamp")
                        .HasColumnType("int");

                    b.Property<string>("url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idCertificate");

                    b.HasIndex("idCamp");

                    b.ToTable("Certificate");
                });

            modelBuilder.Entity("WebApplication2.Models.Child", b =>
                {
                    b.Property<int>("idChild")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idChild"), 1L, 1);

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Snils")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("idCitizenship")
                        .HasColumnType("int");

                    b.Property<int?>("idFactAddress")
                        .HasColumnType("int");

                    b.Property<int>("idParent")
                        .HasColumnType("int");

                    b.Property<int?>("idPersonalDocument")
                        .HasColumnType("int");

                    b.Property<int?>("idRegistrationAddress")
                        .HasColumnType("int");

                    b.Property<string>("telephoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idChild");

                    b.HasIndex("idCitizenship");

                    b.HasIndex("idFactAddress");

                    b.HasIndex("idParent");

                    b.HasIndex("idPersonalDocument");

                    b.HasIndex("idRegistrationAddress");

                    b.ToTable("Children");
                });

            modelBuilder.Entity("WebApplication2.Models.Citizenship", b =>
                {
                    b.Property<int>("idCitizenship")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idCitizenship"), 1L, 1);

                    b.Property<string>("fullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idCitizenship");

                    b.ToTable("Citizenships");
                });

            modelBuilder.Entity("WebApplication2.Models.District", b =>
                {
                    b.Property<int>("idDistrict")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idDistrict"), 1L, 1);

                    b.Property<int>("idRegion")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idDistrict");

                    b.HasIndex("idRegion");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("WebApplication2.Models.FactAddress", b =>
                {
                    b.Property<int>("idFactAddress")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idFactAddress"), 1L, 1);

                    b.Property<string>("district")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("flat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("houseHumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("housing")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("idCitizenship")
                        .HasColumnType("int");

                    b.Property<string>("index")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("locality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("street")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idFactAddress");

                    b.HasIndex("idCitizenship");

                    b.ToTable("FactAddresses");
                });

            modelBuilder.Entity("WebApplication2.Models.Feedback", b =>
                {
                    b.Property<int>("idFeedback")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idFeedback"), 1L, 1);

                    b.Property<string>("comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("datePublished")
                        .HasColumnType("datetime2");

                    b.Property<int>("estimation")
                        .HasColumnType("int");

                    b.Property<int>("idParent")
                        .HasColumnType("int");

                    b.Property<int>("idShift")
                        .HasColumnType("int");

                    b.HasKey("idFeedback");

                    b.HasIndex("idParent");

                    b.HasIndex("idShift");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("WebApplication2.Models.Locality", b =>
                {
                    b.Property<int>("idLocality")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idLocality"), 1L, 1);

                    b.Property<int>("idDistrict")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idLocality");

                    b.HasIndex("idDistrict");

                    b.ToTable("Localities");
                });

            modelBuilder.Entity("WebApplication2.Models.Organization", b =>
                {
                    b.Property<int>("IdOrganization")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdOrganization"), 1L, 1);

                    b.Property<string>("BIK")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CheckCorres")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CheckNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Director")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("INN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KPP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OGRN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OKPO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdOrganization");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("WebApplication2.Models.Parent", b =>
                {
                    b.Property<int>("idParent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idParent"), 1L, 1);

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParentStatus")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Snils")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("confirmCode")
                        .HasColumnType("int");

                    b.Property<bool>("emailIsConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("idCitizenship")
                        .HasColumnType("int");

                    b.Property<int?>("idFactAddress")
                        .HasColumnType("int");

                    b.Property<int?>("idPersonalDocument")
                        .HasColumnType("int");

                    b.Property<int?>("idRegistrationAddress")
                        .HasColumnType("int");

                    b.Property<string>("telephoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idParent");

                    b.HasIndex("idCitizenship");

                    b.HasIndex("idFactAddress");

                    b.HasIndex("idPersonalDocument");

                    b.HasIndex("idRegistrationAddress");

                    b.ToTable("Parents");
                });

            modelBuilder.Entity("WebApplication2.Models.PersonalDocument", b =>
                {
                    b.Property<int>("idPersonalDocument")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idPersonalDocument"), 1L, 1);

                    b.Property<int>("PlacementDocument")
                        .HasColumnType("int");

                    b.Property<int>("TypePersonalDocument")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateOfIssue")
                        .HasColumnType("datetime2");

                    b.Property<string>("issuedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("series")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("validityTime")
                        .HasColumnType("datetime2");

                    b.HasKey("idPersonalDocument");

                    b.ToTable("Pasports");
                });

            modelBuilder.Entity("WebApplication2.Models.Region", b =>
                {
                    b.Property<int>("idRegion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idRegion"), 1L, 1);

                    b.Property<string>("regionName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idRegion");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("WebApplication2.Models.RegistrationAddress", b =>
                {
                    b.Property<int>("idRegistrationAddress")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idRegistrationAddress"), 1L, 1);

                    b.Property<string>("district")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("flat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("houseHumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("housing")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("idCitizenship")
                        .HasColumnType("int");

                    b.Property<string>("index")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("locality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("street")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idRegistrationAddress");

                    b.HasIndex("idCitizenship");

                    b.ToTable("RegistrationAddresses");
                });

            modelBuilder.Entity("WebApplication2.Models.Request", b =>
                {
                    b.Property<int>("idRequest")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idRequest"), 1L, 1);

                    b.Property<double>("AmountToBePaid")
                        .HasColumnType("float");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentidParent")
                        .HasColumnType("int");

                    b.Property<int>("PaymentType")
                        .HasColumnType("int");

                    b.Property<int>("idChild")
                        .HasColumnType("int");

                    b.Property<int>("idShift")
                        .HasColumnType("int");

                    b.Property<bool>("isConfirmed")
                        .HasColumnType("bit");

                    b.HasKey("idRequest");

                    b.HasIndex("ParentidParent");

                    b.HasIndex("idChild");

                    b.HasIndex("idShift");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("WebApplication2.Models.Shift", b =>
                {
                    b.Property<int>("idShift")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idShift"), 1L, 1);

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateBegin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("SeasonCamp")
                        .HasColumnType("int");

                    b.Property<string>("ShiftName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("idCamp")
                        .HasColumnType("int");

                    b.HasKey("idShift");

                    b.HasIndex("idCamp");

                    b.ToTable("Shifts");
                });

            modelBuilder.Entity("WebApplication2.Models.Street", b =>
                {
                    b.Property<int>("idStreet")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idStreet"), 1L, 1);

                    b.Property<int>("idLocality")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idStreet");

                    b.HasIndex("idLocality");

                    b.ToTable("Streets");
                });

            modelBuilder.Entity("WebApplication2.ChatModels.Dialog", b =>
                {
                    b.HasOne("WebApplication2.Models.Organization", "Organization")
                        .WithMany("Dialogs")
                        .HasForeignKey("idOrganization")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication2.Models.Parent", "Parent")
                        .WithMany("Dialogs")
                        .HasForeignKey("idParent")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("WebApplication2.ChatModels.Message", b =>
                {
                    b.HasOne("WebApplication2.ChatModels.Dialog", "Dialog")
                        .WithMany("Messages")
                        .HasForeignKey("idDialog")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication2.Models.Organization", "Organization")
                        .WithMany("Messages")
                        .HasForeignKey("idOrganization");

                    b.HasOne("WebApplication2.Models.Parent", "Parent")
                        .WithMany("Messages")
                        .HasForeignKey("idParent");

                    b.Navigation("Dialog");

                    b.Navigation("Organization");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("WebApplication2.Models.Camp", b =>
                {
                    b.HasOne("WebApplication2.Models.Organization", "Organization")
                        .WithMany("Camps")
                        .HasForeignKey("OrganizationIdOrganization");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("WebApplication2.Models.CampPhoto", b =>
                {
                    b.HasOne("WebApplication2.Models.Camp", "Camp")
                        .WithMany("CampPhotos")
                        .HasForeignKey("idCamp")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Camp");
                });

            modelBuilder.Entity("WebApplication2.Models.Certificate", b =>
                {
                    b.HasOne("WebApplication2.Models.Camp", "Camp")
                        .WithMany("Certificate")
                        .HasForeignKey("idCamp")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Camp");
                });

            modelBuilder.Entity("WebApplication2.Models.Child", b =>
                {
                    b.HasOne("WebApplication2.Models.Citizenship", "Citizenship")
                        .WithMany("Childs")
                        .HasForeignKey("idCitizenship");

                    b.HasOne("WebApplication2.Models.FactAddress", "FactAddress")
                        .WithMany("Children")
                        .HasForeignKey("idFactAddress");

                    b.HasOne("WebApplication2.Models.Parent", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("idParent")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication2.Models.PersonalDocument", "PersonalDocument")
                        .WithMany("Childs")
                        .HasForeignKey("idPersonalDocument");

                    b.HasOne("WebApplication2.Models.RegistrationAddress", "RegistrationAddress")
                        .WithMany("Children")
                        .HasForeignKey("idRegistrationAddress");

                    b.Navigation("Citizenship");

                    b.Navigation("FactAddress");

                    b.Navigation("Parent");

                    b.Navigation("PersonalDocument");

                    b.Navigation("RegistrationAddress");
                });

            modelBuilder.Entity("WebApplication2.Models.District", b =>
                {
                    b.HasOne("WebApplication2.Models.Region", "Region")
                        .WithMany("Districts")
                        .HasForeignKey("idRegion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("WebApplication2.Models.FactAddress", b =>
                {
                    b.HasOne("WebApplication2.Models.Citizenship", "Citizenship")
                        .WithMany("Facts")
                        .HasForeignKey("idCitizenship");

                    b.Navigation("Citizenship");
                });

            modelBuilder.Entity("WebApplication2.Models.Feedback", b =>
                {
                    b.HasOne("WebApplication2.Models.Parent", "Parent")
                        .WithMany("Feedbacks")
                        .HasForeignKey("idParent")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication2.Models.Shift", "Shift")
                        .WithMany("Feedbacks")
                        .HasForeignKey("idShift")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("WebApplication2.Models.Locality", b =>
                {
                    b.HasOne("WebApplication2.Models.District", "District")
                        .WithMany("Localities")
                        .HasForeignKey("idDistrict")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("WebApplication2.Models.Parent", b =>
                {
                    b.HasOne("WebApplication2.Models.Citizenship", "Citizenship")
                        .WithMany("Parents")
                        .HasForeignKey("idCitizenship");

                    b.HasOne("WebApplication2.Models.FactAddress", "FactAddress")
                        .WithMany("Parents")
                        .HasForeignKey("idFactAddress");

                    b.HasOne("WebApplication2.Models.PersonalDocument", "PersonalDocument")
                        .WithMany("Parents")
                        .HasForeignKey("idPersonalDocument");

                    b.HasOne("WebApplication2.Models.RegistrationAddress", "RegistrationAddress")
                        .WithMany("Parents")
                        .HasForeignKey("idRegistrationAddress");

                    b.Navigation("Citizenship");

                    b.Navigation("FactAddress");

                    b.Navigation("PersonalDocument");

                    b.Navigation("RegistrationAddress");
                });

            modelBuilder.Entity("WebApplication2.Models.RegistrationAddress", b =>
                {
                    b.HasOne("WebApplication2.Models.Citizenship", "Citizenship")
                        .WithMany()
                        .HasForeignKey("idCitizenship");

                    b.Navigation("Citizenship");
                });

            modelBuilder.Entity("WebApplication2.Models.Request", b =>
                {
                    b.HasOne("WebApplication2.Models.Parent", null)
                        .WithMany("Requests")
                        .HasForeignKey("ParentidParent");

                    b.HasOne("WebApplication2.Models.Child", "Child")
                        .WithMany()
                        .HasForeignKey("idChild")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication2.Models.Shift", "Shift")
                        .WithMany("Requests")
                        .HasForeignKey("idShift")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("WebApplication2.Models.Shift", b =>
                {
                    b.HasOne("WebApplication2.Models.Camp", "Camp")
                        .WithMany("Shifts")
                        .HasForeignKey("idCamp")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Camp");
                });

            modelBuilder.Entity("WebApplication2.Models.Street", b =>
                {
                    b.HasOne("WebApplication2.Models.Locality", "Locality")
                        .WithMany("Streets")
                        .HasForeignKey("idLocality")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Locality");
                });

            modelBuilder.Entity("WebApplication2.ChatModels.Dialog", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("WebApplication2.Models.Camp", b =>
                {
                    b.Navigation("CampPhotos");

                    b.Navigation("Certificate");

                    b.Navigation("Shifts");
                });

            modelBuilder.Entity("WebApplication2.Models.Citizenship", b =>
                {
                    b.Navigation("Childs");

                    b.Navigation("Facts");

                    b.Navigation("Parents");
                });

            modelBuilder.Entity("WebApplication2.Models.District", b =>
                {
                    b.Navigation("Localities");
                });

            modelBuilder.Entity("WebApplication2.Models.FactAddress", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Parents");
                });

            modelBuilder.Entity("WebApplication2.Models.Locality", b =>
                {
                    b.Navigation("Streets");
                });

            modelBuilder.Entity("WebApplication2.Models.Organization", b =>
                {
                    b.Navigation("Camps");

                    b.Navigation("Dialogs");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("WebApplication2.Models.Parent", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Dialogs");

                    b.Navigation("Feedbacks");

                    b.Navigation("Messages");

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("WebApplication2.Models.PersonalDocument", b =>
                {
                    b.Navigation("Childs");

                    b.Navigation("Parents");
                });

            modelBuilder.Entity("WebApplication2.Models.Region", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("WebApplication2.Models.RegistrationAddress", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Parents");
                });

            modelBuilder.Entity("WebApplication2.Models.Shift", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Requests");
                });
#pragma warning restore 612, 618
        }
    }
}
